name: Enhanced Java Application Pipeline with Metrics Collection

on:
  push:
    branches: [ pipeline-optimization ]
  pull_request:
    branches: [ pipeline-optimization ]

jobs:
  build-with-metrics:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup directories and install dependencies
        run: |
          set -eo pipefail
          
          # Créer la structure des répertoires
          mkdir -p metrics/system
          mkdir -p metrics/power
          mkdir -p metrics/performance
          
          # Installation des packages nécessaires
          sudo apt-get update
          sudo apt-get install -y \
            linux-tools-common \
            linux-tools-generic \
            python3-pip \
            python3-psutil
          
          # Installer PowerAPI globalement
          sudo pip3 install powerapi pandas numpy

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Collect initial system metrics
        run: |
          set -eo pipefail
          
          # Enregistrer le temps de début
          date +%s%N > metrics/pipeline_start_time.txt
          
          # Collecter les métriques initiales
          echo "=== Initial System Resources ===" > metrics/system/initial_metrics.txt
          top -b -n 1 >> metrics/system/initial_metrics.txt
          
          echo "=== Initial Memory Usage ===" > metrics/system/initial_memory.txt
          free -m >> metrics/system/initial_memory.txt
          
          echo "=== Initial Disk Usage ===" > metrics/system/initial_disk.txt
          df -h >> metrics/system/initial_disk.txt

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven and measure energy
        id: build
        timeout-minutes: 15
        env:
          MAVEN_OPTS: "-Xmx2048m -XX:+TieredCompilation -XX:TieredStopAtLevel=1"
        run: |
          set -eo pipefail
          
          start_time=$(date +%s%N)
          
          # Collecter les métriques avant build
          free -m > metrics/system/pre_build_memory.txt
          
          # Mesure de la consommation d'énergie avec PowerAPI
          python3 -c "
          import powerapi
          from powerapi import database
          
          # Configuration de la base de données
          db = database.InfluxDatabase(
              host='localhost',
              port=8086,
              database='powerapi'
          )
          
          # Configuration du monitoring
          monitor = powerapi.monitor.PowerMonitor(
              'rapl',  # Utilisation de l'interface RAPL
              db,
              1  # Période de mesure en secondes
          )
          
          # Démarrer le monitoring
          monitor.start()
          
          # Enregistrer le début du monitoring
          print('Monitoring started')
          " &
          POWERAPI_PID=$!
          
          # Build optimisé
          ./mvnw -B verify \
            -Dmaven.test.skip=true \
            -Dcheckstyle.skip=true \
            -T 1C
          
          build_status=$?
          end_time=$(date +%s%N)
          
          # Arrêter PowerAPI
          kill $POWERAPI_PID
          
          # Collecter les métriques post-build
          free -m > metrics/system/post_build_memory.txt
          
          # Enregistrer le temps de build
          echo "$((($end_time - $start_time)/1000000))" > metrics/performance/build_time.txt
          
          exit $build_status

      - name: Run tests with energy monitoring
        id: test
        if: success()
        timeout-minutes: 20
        run: |
          set -eo pipefail
          
          start_time=$(date +%s%N)
          
          # Collecter les métriques pré-tests
          free -m > metrics/system/pre_test_memory.txt
          
          # Mesure de la consommation d'énergie avec PowerAPI
          python3 -c "
          import powerapi
          from powerapi import database
          
          # Configuration de la base de données
          db = database.InfluxDatabase(
              host='localhost',
              port=8086,
              database='powerapi'
          )
          
          # Configuration du monitoring
          monitor = powerapi.monitor.PowerMonitor(
              'rapl',  # Utilisation de l'interface RAPL
              db,
              1  # Période de mesure en secondes
          )
          
          # Démarrer le monitoring
          monitor.start()
          
          # Enregistrer le début du monitoring
          print('Monitoring started')
          " &
          POWERAPI_PID=$!
          
          # Tests optimisés
          ./mvnw test -T 1C
          
          test_status=$?
          end_time=$(date +%s%N)
          
          # Arrêter PowerAPI
          kill $POWERAPI_PID
          
          # Collecter les métriques post-tests
          free -m > metrics/system/post_test_memory.txt
          
          # Enregistrer le temps des tests
          echo "$((($end_time - $start_time)/1000000))" > metrics/performance/test_time.txt
          
          exit $test_status

      - name: Build Docker image with energy monitoring
        id: docker-build
        if: success()
        timeout-minutes: 10
        run: |
          set -eo pipefail
          
          start_time=$(date +%s%N)
          
          # Collecter les métriques pré-docker
          free -m > metrics/system/pre_docker_memory.txt
          df -h > metrics/system/pre_docker_disk.txt
          
          # Mesure de la consommation d'énergie avec PowerAPI
          python3 -c "
          import powerapi
          from powerapi import database
          
          # Configuration de la base de données
          db = database.InfluxDatabase(
              host='localhost',
              port=8086,
              database='powerapi'
          )
          
          # Configuration du monitoring
          monitor = powerapi.monitor.PowerMonitor(
              'rapl',  # Utilisation de l'interface RAPL
              db,
              1  # Période de mesure en secondes
          )
          
          # Démarrer le monitoring
          monitor.start()
          
          # Enregistrer le début du monitoring
          print('Monitoring started')
          " &
          POWERAPI_PID=$!
          
          # Build Docker optimisé
          docker build -t app:latest -f .devcontainer/Dockerfile . --no-cache
          
          build_status=$?
          end_time=$(date +%s%N)
          
          # Arrêter PowerAPI
          kill $POWERAPI_PID
          
          # Collecter les métriques post-docker
          free -m > metrics/system/post_docker_memory.txt
          df -h > metrics/system/post_docker_disk.txt
          
          # Enregistrer le temps de build Docker
          echo "$((($end_time - $start_time)/1000000))" > metrics/performance/docker_time.txt
          
          # Collecter la taille de l'image
          docker images app:latest --format "{{.Size}}" > metrics/performance/docker_image_size.txt
          
          exit $build_status

      - name: Collect final system metrics
        if: always()
        run: |
          set -eo pipefail

          # Collecter les métriques système finales
          echo "=== Final System Resources ===" > metrics/system/final_metrics.txt
          top -b -n 1 >> metrics/system/final_metrics.txt || echo "Failed to collect top metrics"

          echo "=== Final Memory Usage ===" > metrics/system/final_memory.txt
          free -m >> metrics/system/final_memory.txt || echo "Failed to collect memory metrics"

          echo "=== Final Disk Usage ===" > metrics/system/final_disk.txt
          df -h >> metrics/system/final_disk.txt || echo "Failed to collect disk metrics"

          # Marquer la fin du pipeline
          date +%s%N > metrics/pipeline_end_time.txt

      - name: Save metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-metrics
          path: metrics/
          retention-days: 90
          if-no-files-found: warn

      - name: Cleanup
        if: always()
        run: |
          docker system prune -af
