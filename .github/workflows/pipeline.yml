name: Enhanced Java Application Pipeline with Energy Monitoring

on:
  push:
    branches: [ pipeline-optimization ]
  pull_request:
    branches: [ pipeline-optimization ]

jobs:
  build-with-metrics:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust and Scaphandre
        run: |
          # Installer Rust si nécessaire
          if ! command -v cargo &> /dev/null; then
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source "$HOME/.cargo/env"
          fi

          # Installer Scaphandre via Cargo
          cargo install scaphandre

      - name: Setup directories and install dependencies
        run: |
          set -eo pipefail
          
          # Créer la structure des répertoires
          mkdir -p metrics/system
          mkdir -p metrics/power
          mkdir -p metrics/performance
          
          # Installation des packages nécessaires
          sudo apt-get update
          sudo apt-get install -y \
            linux-tools-common \
            linux-tools-generic \
            python3-pip \
            python3-psutil

          # Installer dépendances Python
          pip3 install pandas numpy

      - name: Create energy monitoring script
        run: |
          cat > energy_monitor.py << 'EOL'
          import subprocess
          import csv
          import os
          import sys
          import time
          import json
          from datetime import datetime

          def monitor_energy(command, output_file):
              # Créer le répertoire si nécessaire
              os.makedirs(os.path.dirname(output_file), exist_ok=True)
          
              # Préparer le fichier CSV
              with open(output_file, 'w', newline='') as csvfile:
                  writer = csv.writer(csvfile)
                  writer.writerow([
                      'Timestamp', 
                      'Power_Watts', 
                      'Component'
                  ])
          
              # Commande scaphandre pour la sortie JSON
              scaphandre_cmd = [
                  'scaphandre', 'json',
                  '-t', '120'  # Timeout de 2 minutes max
              ]
          
              # Lancer le monitoring en arrière-plan
              monitor_process = subprocess.Popen(
                  scaphandre_cmd, 
                  stdout=subprocess.PIPE, 
                  stderr=subprocess.PIPE,
                  universal_newlines=True
              )
          
              try:
                  # Attendre un court instant pour que Scaphandre démarre
                  time.sleep(2)
          
                  # Exécuter la commande principale
                  main_process = subprocess.Popen(command, shell=True)
                  main_process.wait()
          
                  # Attendre et traiter les données de Scaphandre
                  try:
                      monitor_output, _ = monitor_process.communicate(timeout=10)
                      process_scaphandre_output(monitor_output, output_file)
                  except subprocess.TimeoutExpired:
                      print("Scaphandre monitoring timed out", file=sys.stderr)
          
              finally:
                  # Arrêter le monitoring
                  monitor_process.terminate()
                  monitor_process.wait()
          
          def process_scaphandre_output(output, output_file):
              try:
                  # Diviser le flux JSON en objets individuels
                  json_objects = output.strip().split('\n')
          
                  with open(output_file, 'a', newline='') as csvfile:
                      writer = csv.writer(csvfile)
          
                      for json_str in json_objects:
                          try:
                              data = json.loads(json_str)
          
                              # Extraire les informations pertinentes
                              timestamp = data.get('timestamp', datetime.now().isoformat())
                              power = data.get('power', {}).get('total_power', 0)
          
                              writer.writerow([
                                  timestamp,
                                  power,
                                  'System'
                              ])
                          except json.JSONDecodeError:
                              print(f"Could not parse JSON: {json_str}", file=sys.stderr)
              except Exception as e:
                  print(f"Error processing Scaphandre output: {e}", file=sys.stderr)
          
          def main():
              if len(sys.argv) < 3:
                  print("Usage: python energy_monitor.py 'command' output_file.csv")
                  sys.exit(1)
          
              command = sys.argv[1]
              output_file = sys.argv[2]
          
              monitor_energy(command, output_file)
          
          if __name__ == '__main__':
              main()
          EOL
          
          chmod +x energy_monitor.py

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Collect initial system metrics
        run: |
          set -eo pipefail
          
          # Enregistrer le temps de début
          date +%s%N > metrics/pipeline_start_time.txt
          
          # Collecter les métriques initiales
          echo "=== Initial System Resources ===" > metrics/system/initial_metrics.txt
          top -b -n 1 >> metrics/system/initial_metrics.txt
          
          echo "=== Initial Memory Usage ===" > metrics/system/initial_memory.txt
          free -m >> metrics/system/initial_memory.txt
          
          echo "=== Initial Disk Usage ===" > metrics/system/initial_disk.txt
          df -h >> metrics/system/initial_disk.txt

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven and measure energy
        id: build
        timeout-minutes: 15
        env:
          MAVEN_OPTS: "-Xmx2048m -XX:+TieredCompilation -XX:TieredStopAtLevel=1"
        run: |
          set -eo pipefail
          
          # Ajouter Cargo et Scaphandre au PATH
          source "$HOME/.cargo/env"
          
          start_time=$(date +%s%N)
          
          # Collecter les métriques avant build
          free -m > metrics/system/pre_build_memory.txt
          
          # Monitoring énergétique avec Scaphandre
          python3 energy_monitor.py \
            "./mvnw -B verify -Dmaven.test.skip=true -Dcheckstyle.skip=true -T 1C" \
            metrics/power/build_power_metrics.csv
          
          build_status=$?
          end_time=$(date +%s%N)
          
          # Collecter les métriques post-build
          free -m > metrics/system/post_build_memory.txt
          
          # Enregistrer le temps de build
          echo "$((($end_time - $start_time)/1000000))" > metrics/performance/build_time.txt
          
          exit $build_status

      - name: Run tests with energy monitoring
        id: test
        if: success()
        timeout-minutes: 20
        run: |
          set -eo pipefail
          
          # Ajouter Cargo et Scaphandre au PATH
          source "$HOME/.cargo/env"
          
          start_time=$(date +%s%N)
          
          # Collecter les métriques pré-tests
          free -m > metrics/system/pre_test_memory.txt
          
          # Monitoring énergétique avec Scaphandre
          python3 energy_monitor.py \
            "./mvnw test -T 1C" \
            metrics/power/test_power_metrics.csv
          
          test_status=$?
          end_time=$(date +%s%N)
          
          # Collecter les métriques post-tests
          free -m > metrics/system/post_test_memory.txt
          
          # Enregistrer le temps des tests
          echo "$((($end_time - $start_time)/1000000))" > metrics/performance/test_time.txt
          
          exit $test_status

      - name: Build Docker image with energy monitoring
        id: docker-build
        if: success()
        timeout-minutes: 10
        run: |
          set -eo pipefail
          
          # Ajouter Cargo et Scaphandre au PATH
          source "$HOME/.cargo/env"
          
          start_time=$(date +%s%N)
          
          # Collecter les métriques pré-docker
          free -m > metrics/system/pre_docker_memory.txt
          df -h > metrics/system/pre_docker_disk.txt
          
          # Monitoring énergétique avec Scaphandre
          python3 energy_monitor.py \
            "docker build -t app:latest -f .devcontainer/Dockerfile . --no-cache" \
            metrics/power/docker_build_power_metrics.csv
          
          build_status=$?
          end_time=$(date +%s%N)
          
          # Collecter les métriques post-docker
          free -m > metrics/system/post_docker_memory.txt
          df -h > metrics/system/post_docker_disk.txt
          
          # Enregistrer le temps de build Docker
          echo "$((($end_time - $start_time)/1000000))" > metrics/performance/docker_time.txt
          
          # Collecter la taille de l'image
          docker images app:latest --format "{{.Size}}" > metrics/performance/docker_image_size.txt
          
          exit $build_status

      - name: Collect final system metrics
        if: always()
        run: |
          set -eo pipefail

          # Collecter les métriques système finales
          echo "=== Final System Resources ===" > metrics/system/final_metrics.txt
          top -b -n 1 >> metrics/system/final_metrics.txt || echo "Failed to collect top metrics"

          echo "=== Final Memory Usage ===" > metrics/system/final_memory.txt
          free -m >> metrics/system/final_memory.txt || echo "Failed to collect memory metrics"

          echo "=== Final Disk Usage ===" > metrics/system/final_disk.txt
          df -h >> metrics/system/final_disk.txt || echo "Failed to collect disk metrics"

          # Marquer la fin du pipeline
          date +%s%N > metrics/pipeline_end_time.txt

      - name: Save metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-metrics
          path: metrics/
          retention-days: 90
          if-no-files-found: warn

      - name: Cleanup
        if: always()
        run: |
          docker system prune -af
